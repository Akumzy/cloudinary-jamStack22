datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String?          @unique
  bio           String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chatRooms     ChatRoomMember[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatRoom {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  creatorId   Int
  createdAt   DateTime         @default(now())
  messages    Message[]
  members     ChatRoomMember[]
}

model ChatRoomMember {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int // relation scalar field (used in the `@relation` attribute above)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  joinedAt   DateTime @default(now())

  @@unique([chatRoomId, userId])
}

model Message {
  id        Int       @id @default(autoincrement())
  isDefault Boolean?  @default(false)
  image     Json?
  video     Json?
  text      String?
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId    Int
  room      ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedAt DateTime? @updatedAt
}

// pscale connect jam-stack22 main --port 3309
// pscale connect jam-stack22 shadow --port 3310
